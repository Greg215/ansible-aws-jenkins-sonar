---
    - name: run db
      docker_container:
        name: db
        image: postgres:alpine
        env:
         POSTGRES_DATABASE: sonar
         POSTGRES_USER: sonar
         POSTGRES_PASSWORD: sonar
        ports:
         - 5432:5432
        volumes:
         - postgresql:/var/lib/postgresql
         - postgresql_data:/var/lib/postgresql/data

    - name: run sonarqube
      docker_container:
        name: sonarqube
        image: sonarqube:alpine
        ports:
         - 9000:9000
        links:
         - db:db
        env:
         SONARQUBE_JDBC_URL: jdbc:postgresql://db:5432/sonar
         SONARQUBE_JDBC_USERNAME: sonar
         SONARQUBE_JDBC_PASSWORD: sonar
        volumes:
         - sonarqube_conf:/opt/sonarqube/conf
         - sonarqube_data:/opt/sonarqube/data
         - sonarqube_extensions:/opt/sonarqube/extensions
         - sonarqube_bundled-plugins:/opt/sonarqube/lib/bundled-plugins

    - name: Make sure Sonar is responding on the configured port.
      wait_for: port=9000 delay=3 timeout=30

    - name: stop sonarqube
      docker_container:
        name: sonarqube
        state: stopped

    - name: copy date base to new instance
      synchronize:
        src: files
        dest: /volumes/sonar
        archive: yes
        links: yes

    - name: copy over the language plugin
      synchronize:
        src: templates/
        dest: /volumes/docker/volumes/sonarqube_extensions/_data/plugins
        archive: yes
        links: yes

    - name: copy user file
      command: docker cp /volumes/sonar/files/dbexport3.dump db:/

    - name: remove db
      command: docker exec db dropdb -U sonar sonar

    - name: create db
      command: docker exec db createdb -U sonar sonar

    - name: import db
      command: docker exec db pg_restore -U sonar -d sonar dbexport3.dump

    - name: restart sonarqube
      docker_container:
        name: sonarqube
        state: started

    - name: Make sure Sonar is responding on the configured port.
      wait_for: port=9000 delay=3 timeout=30

    - name: check db_migration_status
      uri:
       url: http://greg.dedyn.io:9000/api/system/db_migration_status
       body_format: json
       return_content: yes 
      register: db_status
      until: "db_status.status == 200"
      retries: 10
      delay: 1

    - name: Database migration
      uri:
        url: http://greg.dedyn.io:9000/api/system/migrate_db
        method: POST
      when: db_status.json.state == "MIGRATION_REQUIRED" 
      with_items: db_status

    - name: check db migration has been done
      uri:
       url: http://greg.dedyn.io:9000/api/system/db_migration_status
       body_format: json
       return_content: yes
      register: result
      until: result.json.state == "MIGRATION_SUCCEEDED"
      retries: 10
      delay: 1

